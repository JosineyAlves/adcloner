import { FacebookAccount, FacebookPage, FacebookPixel, Campaign, CampaignClone, CampaignObjective } from './types'

export class FacebookAPI {
  private appId: string
  private appSecret: string
  private baseUrl: string = 'https://graph.facebook.com/v23.0'

  constructor() {
    this.appId = process.env.NEXT_PUBLIC_FACEBOOK_APP_ID || ''
    this.appSecret = process.env.FACEBOOK_APP_SECRET || ''
  }

  // ===== RATE LIMITING E RETRY =====

  /**
   * Implementa retry com backoff exponencial para rate limits
   */
  private async withRetry<T>(fn: () => Promise<T>, maxRetries: number = 3): Promise<T> {
    for (let i = 0; i < maxRetries; i++) {
      try {
        return await fn()
      } catch (error: any) {
        // Verificar se √© um erro de rate limit
        const isRateLimitError = error?.code === 4 || 
                               error?.code === 17 || 
                               error?.code === 341 || 
                               error?.code === 613 ||
                               error?.message?.includes('rate limit')

        if (isRateLimitError && i < maxRetries - 1) {
          const delay = Math.pow(2, i) * 1000 // Backoff exponencial
          console.log(`Rate limit hit, retrying in ${delay}ms...`)
          await new Promise(resolve => setTimeout(resolve, delay))
          continue
        }
        
        throw error
      }
    }
    throw new Error('Max retries exceeded')
  }

  /**
   * Faz chamada para API Graph com retry autom√°tico
   */
  private async makeApiCall(endpoint: string, params: Record<string, any> = {}): Promise<any> {
    const url = new URL(`${this.baseUrl}${endpoint}`)
    
    // Adicionar par√¢metros √† URL
    Object.entries(params).forEach(([key, value]) => {
      if (value !== undefined && value !== null) {
        url.searchParams.append(key, value.toString())
      }
    })

    const response = await fetch(url.toString(), {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    })

    const data = await response.json()

    if (data.error) {
      const error = new Error(data.error.message)
      ;(error as any).code = data.error.code
      throw error
    }

    return data
  }

  // ===== AUTENTICA√á√ÉO E TOKENS =====

  /**
   * Obt√©m informa√ß√µes do usu√°rio usando User Access Token
   */
  async getUserInfo(accessToken: string) {
    return this.withRetry(async () => {
      return this.makeApiCall('/me', {
        fields: 'id,name,email',
        access_token: accessToken
      })
    })
  }

  /**
   * Converte token de curta dura√ß√£o para longa dura√ß√£o
   */
  async exchangeToken(shortLivedToken: string): Promise<string> {
    try {
      const response = await fetch(
        `${this.baseUrl}/oauth/access_token?grant_type=fb_exchange_token&client_id=${this.appId}&client_secret=${this.appSecret}&fb_exchange_token=${shortLivedToken}`
      )
      const data = await response.json()
      
      if (data.error) {
        throw new Error(data.error.message)
      }
      
      return data.access_token
    } catch (error) {
      console.error('Error exchanging token:', error)
      throw error
    }
  }

  /**
   * Obt√©m Page Access Token para uma p√°gina espec√≠fica
   */
  async getPageAccessToken(userAccessToken: string, pageId: string): Promise<string> {
    try {
      const response = await fetch(
        `${this.baseUrl}/${pageId}?fields=access_token&access_token=${userAccessToken}`
      )
      const data = await response.json()
      
      if (data.error) {
        throw new Error(data.error.message)
      }
      
      return data.access_token
    } catch (error) {
      console.error('Error getting page access token:', error)
      throw error
    }
  }

  // ===== CONTAS DE AN√öNCIOS =====

  /**
   * Obt√©m todas as contas de an√∫ncios do usu√°rio
   */
  async getAdAccounts(userAccessToken: string): Promise<FacebookAccount[]> {
    try {
      const response = await fetch(
        `${this.baseUrl}/me/adaccounts?fields=id,name,account_status,account_id,business_name,currency,timezone_name,status&access_token=${userAccessToken}`
      )
      const data = await response.json()
      
      if (data.error) {
        throw new Error(data.error.message)
      }
      
      return data.data.map((account: any) => ({
        id: account.id,
        name: account.name,
        businessManagerId: account.business_name || 'Unknown',
        businessManagerName: account.business_name || 'Unknown',
        status: this.mapAccountStatus(account.account_status),
        tokenStatus: 'valid',
        pages: [],
        pixels: [],
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }))
    } catch (error) {
      console.error('Error getting ad accounts:', error)
      throw error
    }
  }

  /**
   * Obt√©m p√°ginas do usu√°rio
   */
  async getPages(userAccessToken: string): Promise<FacebookPage[]> {
    try {
      const response = await fetch(
        `${this.baseUrl}/me/accounts?fields=id,name,category,access_token&access_token=${userAccessToken}`
      )
      const data = await response.json()
      
      if (data.error) {
        throw new Error(data.error.message)
      }
      
      return data.data.map((page: any) => ({
        id: page.id,
        name: page.name,
        category: page.category,
        accessToken: page.access_token
      }))
    } catch (error) {
      console.error('Error getting pages:', error)
      throw error
    }
  }

  /**
   * Obt√©m pixels do usu√°rio
   */
  async getPixels(userAccessToken: string): Promise<FacebookPixel[]> {
    try {
      // Buscar pixels atrav√©s das contas de an√∫ncios usando a nova estrutura
      const adAccounts = await this.getAdAccounts(userAccessToken)
      const allPixels: FacebookPixel[] = []
      
      for (const account of adAccounts) {
        try {
          // Nova estrutura: buscar data_sets (que incluem pixels)
      const response = await fetch(
            `${this.baseUrl}/${account.id}/data_sets?fields=id,name,type,data_sources&access_token=${userAccessToken}`
      )
      const data = await response.json()
      
          if (data.data) {
            data.data.forEach((dataSet: any) => {
              // Filtrar apenas pixels (type = 'PIXEL')
              if (dataSet.type === 'PIXEL') {
                allPixels.push({
                  id: dataSet.id,
                  name: dataSet.name,
                  code: dataSet.id // Usar ID como c√≥digo tempor√°rio
                })
              }
            })
          }
        } catch (error) {
          console.error(`Error getting data sets for account ${account.id}:`, error)
          
          // Fallback: tentar buscar pixels diretamente (m√©todo antigo)
          try {
            const fallbackResponse = await fetch(
              `${this.baseUrl}/${account.id}/pixels?fields=id,name,code&access_token=${userAccessToken}`
            )
            const fallbackData = await fallbackResponse.json()
            
            if (fallbackData.data) {
              fallbackData.data.forEach((pixel: any) => {
                allPixels.push({
              id: pixel.id,
              name: pixel.name,
              code: pixel.code
            })
          })
        }
          } catch (fallbackError) {
            console.error(`Error getting pixels (fallback) for account ${account.id}:`, fallbackError)
          }
        }
      }
      
      console.log('üìä Pixels/Data Sets encontrados:', allPixels.length)
      return allPixels
    } catch (error) {
      console.error('Error getting pixels:', error)
      return [] // Retornar array vazio em caso de erro
    }
  }

  /**
   * Obt√©m campanhas de uma conta de an√∫ncios
   */
  async getCampaigns(adAccountId: string, accessToken: string): Promise<Campaign[]> {
    try {
      const response = await fetch(
        `${this.baseUrl}/${adAccountId}/campaigns?fields=id,name,objective,status,created_time,updated_time,insights{impressions,clicks,spend}&access_token=${accessToken}`
      )
      const data = await response.json()
      
      if (data.error) {
        console.error('Error getting campaigns:', data.error)
        return []
      }
      
      const campaigns: Campaign[] = []
      if (data.data) {
        data.data.forEach((campaign: any) => {
          const insights = campaign.insights?.data?.[0] || {}
          
          campaigns.push({
            id: campaign.id,
            name: campaign.name,
            objective: this.mapCampaignObjective(campaign.objective),
            adSetName: `Ad Set for ${campaign.name}`,
            targeting: {
              ageMin: 18,
              ageMax: 65,
              locations: ['BR'],
              interests: [],
              gender: 'all'
            },
            budget: {
              amount: 100,
              currency: 'BRL',
              type: 'daily'
            },
            scheduling: {
              startDate: campaign.created_time,
              timezone: 'America/Sao_Paulo'
            },
            adName: `Ad for ${campaign.name}`,
            creative: {
              type: 'image',
              url: 'https://via.placeholder.com/1200x630',
              title: campaign.name,
              description: 'Descri√ß√£o do an√∫ncio'
            },
            destination: {
              url: 'https://example.com',
              utmSource: 'facebook',
              utmMedium: 'cpc',
              utmCampaign: campaign.name
            },
            pixelId: '',
            status: this.mapCampaignStatus(campaign.status),
            createdAt: campaign.created_time,
            updatedAt: campaign.updated_time
          })
        })
      }
      
      console.log(`üìä Campanhas encontradas para conta ${adAccountId}:`, campaigns.length)
      return campaigns
    } catch (error) {
      console.error('Error getting campaigns:', error)
      return []
    }
  }

  /**
   * Mapeia objetivo da campanha do Facebook para nosso tipo
   */
  private mapCampaignObjective(objective: string): CampaignObjective {
    const mapping: Record<string, CampaignObjective> = {
      'CONVERSIONS': 'CONVERSIONS',
      'LINK_CLICKS': 'TRAFFIC',
      'REACH': 'REACH',
      'BRAND_AWARENESS': 'BRAND_AWARENESS',
      'VIDEO_VIEWS': 'VIDEO_VIEWS',
      'LEAD_GENERATION': 'LEAD_GENERATION'
    }
    
    return mapping[objective] || 'TRAFFIC'
  }

  /**
   * Mapeia status da campanha do Facebook para nosso tipo
   */
  private mapCampaignStatus(status: string): 'draft' | 'active' | 'paused' | 'deleted' {
    const mapping: Record<string, 'draft' | 'active' | 'paused' | 'deleted'> = {
      'ACTIVE': 'active',
      'PAUSED': 'paused',
      'DELETED': 'deleted',
      'DRAFT': 'draft'
    }
    
    return mapping[status] || 'draft'
  }

  // ===== CAMPANHAS E AN√öNCIOS =====

  /**
   * Cria uma nova campanha
   */
  async createCampaign(adAccountId: string, accessToken: string, campaignData: any): Promise<string> {
    try {
      const response = await fetch(
        `${this.baseUrl}/${adAccountId}/campaigns`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: new URLSearchParams({
            name: campaignData.name,
            objective: campaignData.objective,
            status: 'PAUSED', // Sempre pausada para evitar gastos
            special_ad_categories: '[]',
            access_token: accessToken,
            ...(campaignData.daily_budget && { daily_budget: campaignData.daily_budget.toString() }),
            ...(campaignData.lifetime_budget && { lifetime_budget: campaignData.lifetime_budget.toString() }),
            bid_strategy: campaignData.bid_strategy || 'LOWEST_COST_WITHOUT_CAP'
          })
        }
      )
      
      const data = await response.json()
      
      if (data.error) {
        throw new Error(data.error.message)
      }
      
      return data.id
    } catch (error) {
      console.error('Error creating campaign:', error)
      throw error
    }
  }

  /**
   * Cria um conjunto de an√∫ncios
   */
  async createAdSet(adAccountId: string, accessToken: string, adSetData: any): Promise<string> {
    try {
      // Preservar targeting original ou usar padr√£o
      const targeting = adSetData.targeting || {
        geo_locations: {
          countries: ['BR']
        },
        age_min: 18,
        age_max: 65
      }

      // Preparar par√¢metros preservando dados originais
      const params: any = {
        name: adSetData.name,
        campaign_id: adSetData.campaignId,
        targeting: JSON.stringify(targeting),
        status: 'PAUSED', // Sempre pausado para evitar gastos
        access_token: accessToken
      }
      
      // Adicionar campos opcionais apenas se existirem
      if (adSetData.daily_budget) params.daily_budget = adSetData.daily_budget.toString()
      if (adSetData.lifetime_budget) params.lifetime_budget = adSetData.lifetime_budget.toString()
      if (adSetData.billing_event) params.billing_event = adSetData.billing_event
      if (adSetData.optimization_goal) params.optimization_goal = adSetData.optimization_goal
      if (adSetData.bid_amount) params.bid_amount = adSetData.bid_amount.toString()
      if (adSetData.bid_strategy) params.bid_strategy = adSetData.bid_strategy
      if (adSetData.start_time) params.start_time = adSetData.start_time
      if (adSetData.end_time) params.end_time = adSetData.end_time
      if (adSetData.time_start) params.time_start = adSetData.time_start
      if (adSetData.time_stop) params.time_stop = adSetData.time_stop

      const response = await fetch(
        `${this.baseUrl}/${adAccountId}/adsets`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: new URLSearchParams(params)
        }
      )
      
      const data = await response.json()
      
      if (data.error) {
        console.error('Facebook API error:', data.error)
        throw new Error(data.error.message)
      }
      
      return data.id
    } catch (error) {
      console.error('Error creating ad set:', error)
      throw error
    }
  }

  /**
   * Obt√©m criativos de uma conta de an√∫ncios
   */
  async getCreatives(adAccountId: string, accessToken: string): Promise<any[]> {
    try {
      const response = await fetch(
        `${this.baseUrl}/${adAccountId}/adcreatives?fields=id,name,object_story_spec&access_token=${accessToken}`
      )
      const data = await response.json()
      
      if (data.error) {
        console.error('Error getting creatives:', data.error)
        return []
      }
      
      return data.data || []
    } catch (error) {
      console.error('Error getting creatives:', error)
      return []
    }
  }

  /**
   * Cria um criativo
   */
  async createCreative(adAccountId: string, creativeData: any, accessToken: string): Promise<string> {
    try {
      const response = await fetch(
        `${this.baseUrl}/${adAccountId}/adcreatives`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: new URLSearchParams({
            name: creativeData.name,
            object_story_spec: JSON.stringify(creativeData.object_story_spec),
            access_token: accessToken
          })
        }
      )
      
      const data = await response.json()
      
      if (data.error) {
        console.error('Facebook API error:', data.error)
        throw new Error(data.error.message)
      }
      
      return data.id
    } catch (error) {
      console.error('Error creating creative:', error)
      throw error
    }
  }

  /**
   * Cria um an√∫ncio
   */
  async createAd(adAccountId: string, accessToken: string, adData: any): Promise<string> {
    try {
      // Se n√£o temos creative, criar um b√°sico
      let creativeId = adData.creativeId
      
      if (!creativeId) {
        // Buscar p√°ginas da conta para usar como fallback
        const pages = await this.getPages(accessToken)
        const pageId = pages.length > 0 ? pages[0].id : null
        
        if (pageId) {
          const creative = await this.createCreative(adAccountId, {
            name: `${adData.name} Creative`,
            object_story_spec: {
              page_id: pageId,
              link_data: {
                link: 'https://example.com',
                message: 'Confira nosso produto!'
              }
            }
          }, accessToken)
          
          creativeId = creative
        }
      }

      const response = await fetch(
        `${this.baseUrl}/${adAccountId}/ads`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: new URLSearchParams({
            name: adData.name,
            adset_id: adData.adSetId,
            creative: `{"creative_id":"${creativeId}"}`,
            status: 'PAUSED',
            access_token: accessToken
          })
        }
      )
      
      const data = await response.json()
      
      if (data.error) {
        console.error('Facebook API error:', data.error)
        throw new Error(data.error.message)
      }
      
      return data.id
    } catch (error) {
      console.error('Error creating ad:', error)
      throw error
    }
  }

  /**
   * Clona uma campanha para outra conta
   */
  async cloneCampaign(
    sourceAccountId: string, 
    targetAccountId: string, 
    accessToken: string, 
    campaignId: string
  ): Promise<CampaignClone> {
    try {
      // 1. Obter dados da campanha original
      const campaignData = await this.getCampaignDetails(campaignId, accessToken)
      
      // 2. Criar nova campanha na conta de destino
      const newCampaignId = await this.createCampaign(targetAccountId, accessToken, {
        name: `${campaignData.name} (Clone)`,
        objective: campaignData.objective
      })
      
      // 3. Clonar conjuntos de an√∫ncios
      const adSetClones = []
      if (campaignData.adSets && campaignData.adSets.length > 0) {
        for (const adSet of campaignData.adSets) {
          try {
            console.log(`Clonando Ad Set: ${adSet.name}`, {
            name: adSet.name,
            campaignId: newCampaignId,
            targeting: adSet.targeting,
              dailyBudget: adSet.daily_budget,
              optimizationGoal: adSet.optimization_goal
            })
            
            const newAdSetId = await this.createAdSet(targetAccountId, accessToken, {
              name: adSet.name,
              campaignId: newCampaignId,
              targeting: adSet.targeting || {},
              dailyBudget: adSet.daily_budget || 1000,
              optimizationGoal: adSet.optimization_goal || 'REACH'
            })
            
            adSetClones.push({
            originalId: adSet.id,
            newId: newAdSetId
            })
            
            console.log(`‚úÖ Ad Set clonado com sucesso: ${newAdSetId}`)
          } catch (error) {
            console.error(`Error cloning ad set ${adSet.id}:`, error)
          }
        }
      } else {
        console.log('‚ö†Ô∏è Nenhum Ad Set encontrado para clonar')
      }
      
      // 4. Clonar an√∫ncios
      if (campaignData.ads && campaignData.ads.length > 0) {
        for (let i = 0; i < campaignData.ads.length; i++) {
          const ad = campaignData.ads[i]
          const newAdSetId = adSetClones[i]?.newId
          
          if (newAdSetId) {
            try {
              console.log(`Clonando Ad: ${ad.name}`)
              
              // Se o ad tem creative, tentar clonar o creative
              let creativeId = null
              if (ad.creative && ad.creative.id) {
                try {
                  // Buscar detalhes do creative original
                  const creativeResponse = await fetch(
                    `${this.baseUrl}/${ad.creative.id}?fields=name,object_story_spec&access_token=${accessToken}`
                  )
                  const creativeData = await creativeResponse.json()
                  
                  if (!creativeData.error) {
                    // Criar novo creative na conta de destino
                    const newCreativeId = await this.createCreative(targetAccountId, {
                      name: `${creativeData.name} (Clone)`,
                      object_story_spec: creativeData.object_story_spec
                    }, accessToken)
                    
                    creativeId = newCreativeId
                    console.log(`‚úÖ Creative clonado: ${newCreativeId}`)
                  }
                } catch (creativeError) {
                  console.error(`Error cloning creative for ad ${ad.id}:`, creativeError)
                }
              }
              
            await this.createAd(targetAccountId, accessToken, {
              name: ad.name,
              adSetId: newAdSetId,
                creativeId: creativeId
              })
              
              console.log(`‚úÖ Ad clonado com sucesso: ${ad.name}`)
            } catch (error) {
              console.error(`Error cloning ad ${ad.id}:`, error)
            }
          }
        }
      } else {
        console.log('‚ö†Ô∏è Nenhum Ad encontrado para clonar')
      }
      
      return {
        id: `clone_${Date.now()}`,
        originalCampaignId: campaignId,
        accountId: targetAccountId,
        accountName: 'Target Account',
        status: 'success',
        facebookCampaignId: newCampaignId,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }
      
    } catch (error) {
      console.error('Error cloning campaign:', error)
      throw error
    }
  }

  /**
   * Clona uma campanha usando m√©todo nativo do Facebook (/copies)
   */
  async cloneCampaignNative(
    sourceCampaignId: string, 
    targetAccountId: string, 
    accessToken: string
  ): Promise<CampaignClone> {
    try {
      console.log(`üöÄ Iniciando clonagem nativa: ${sourceCampaignId}`)
      
      // Usar endpoint nativo /copies com deep_copy
      const response = await fetch(
        `${this.baseUrl}/${sourceCampaignId}/copies`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: new URLSearchParams({
            deep_copy: 'true',
            status_option: 'PAUSED',
            rename_options: JSON.stringify({ name_suffix: ' - Clone' }),
            parameter_overrides: JSON.stringify({
              ad_account_id: targetAccountId
            }),
            access_token: accessToken
          })
        }
      )
      
      const data = await response.json()
      
      if (data.error) {
        console.error('Facebook API error:', data.error)
        throw new Error(data.error.message)
      }
      
      console.log(`‚úÖ Campanha clonada nativamente: ${data.copied_campaign_id}`)
      console.log(`üìä Objetos copiados: ${data.ad_object_ids?.length || 0}`)
      
      return {
        originalCampaignId: sourceCampaignId,
        newCampaignId: data.copied_campaign_id,
        status: 'success'
      }
    } catch (error) {
      console.error('Error cloning campaign via native method:', error)
      throw error
    }
  }

  /**
   * Clona uma campanha usando m√©todo de importa√ß√£o em massa (similar ao CSV)
   */
  async cloneCampaignBulk(
    sourceAccountId: string, 
    targetAccountId: string, 
    accessToken: string, 
    campaignId: string
  ): Promise<CampaignClone> {
    try {
      console.log(`üöÄ Tentando clonagem nativa primeiro: ${campaignId}`)
      
      // Tentar m√©todo nativo primeiro
      try {
        return await this.cloneCampaignNative(campaignId, targetAccountId, accessToken)
      } catch (nativeError) {
        console.log(`‚ö†Ô∏è M√©todo nativo falhou, usando fallback: ${nativeError}`)
        
        // Fallback para m√©todo manual
        console.log(`üîÑ Usando m√©todo manual como fallback`)
        
        // 1. Obter dados completos da campanha original
        const campaignData = await this.getCampaignDetails(campaignId, accessToken)
        
        // 2. Preparar dados para importa√ß√£o em massa
        const bulkData = await this.prepareBulkImportData(campaignData, targetAccountId, accessToken)
        
        // 3. Criar campanha via importa√ß√£o em massa
        const newCampaignId = await this.createCampaignFromBulkData(targetAccountId, accessToken, bulkData)
        
        console.log(`‚úÖ Campanha clonada com fallback: ${newCampaignId}`)
        
        return {
          originalCampaignId: campaignId,
          newCampaignId: newCampaignId,
          status: 'success'
        }
      }
    } catch (error) {
      console.error('Error cloning campaign:', error)
      throw error
    }
  }

  /**
   * Prepara dados para importa√ß√£o em massa (remove IDs espec√≠ficos)
   */
  private async prepareBulkImportData(campaignData: any, targetAccountId: string, accessToken: string): Promise<any> {
    // Buscar p√°ginas dispon√≠veis na conta de destino
    const pages = await this.getPages(accessToken)
    const pageId = pages.length > 0 ? pages[0].id : null
    
    console.log(`üìÑ P√°ginas encontradas: ${pages.length}`)
    if (pageId) {
      console.log(`‚úÖ Usando p√°gina: ${pageId}`)
    } else {
      console.log(`‚ö†Ô∏è Nenhuma p√°gina encontrada`)
    }
    
    const bulkData = {
              // Dados da campanha (preservando configura√ß√µes originais)
        campaign: {
          name: `${campaignData.name} (Clone)`,
          status: 'PAUSED', // Sempre pausado para evitar gastos
          objective: campaignData.objective,
          special_ad_categories: campaignData.special_ad_categories || '[]',
          daily_budget: campaignData.daily_budget,
          lifetime_budget: campaignData.lifetime_budget,
          bid_strategy: campaignData.bid_strategy || 'LOWEST_COST_WITHOUT_CAP'
        },
      
              // Dados dos Ad Sets (preservando TODAS as configura√ß√µes originais)
        adSets: campaignData.adSets?.map((adSet: any) => ({
          name: adSet.name,
          status: 'PAUSED', // Sempre pausado para evitar gastos
          daily_budget: adSet.daily_budget,
          lifetime_budget: adSet.lifetime_budget,
          billing_event: adSet.billing_event,
          optimization_goal: adSet.optimization_goal,
          targeting: adSet.targeting, // Preservar targeting completo
          bid_amount: adSet.bid_amount,
          bid_strategy: adSet.bid_strategy || 'LOWEST_COST_WITHOUT_CAP',
          start_time: adSet.start_time,
          end_time: adSet.end_time,
          time_start: adSet.time_start,
          time_stop: adSet.time_stop
        })) || [],
      
      // Dados dos Ads (preservando criativos originais)
      ads: campaignData.ads?.map((ad: any) => {
        const originalCreative = ad.creative?.object_story_spec?.link_data
        
        return {
          name: ad.name,
          status: 'PAUSED',
          adset_id: ad.adset_id, // Preservar refer√™ncia ao Ad Set
          creative: {
            name: `${ad.name} Creative`,
            object_story_spec: {
              page_id: pageId, // Usar p√°gina da conta de destino
              link_data: {
                link: originalCreative?.link || 'https://example.com',
                message: originalCreative?.message || 'Confira nosso produto!',
                title: originalCreative?.title || '',
                description: originalCreative?.description || '',
                image_hash: originalCreative?.image_hash || null,
                video_id: originalCreative?.video_id || null,
                call_to_action: originalCreative?.call_to_action || null
              }
            }
          }
        }
      }) || []
    }
    
    console.log(`üìã Dados preparados para clonagem:`)
    console.log(`   - Campanha: ${bulkData.campaign.name}`)
    console.log(`   - Ad Sets: ${bulkData.adSets.length}`)
    console.log(`   - Ads: ${bulkData.ads.length}`)
    
    return bulkData
  }

  /**
   * Cria campanha a partir de dados de importa√ß√£o em massa
   */
  private async createCampaignFromBulkData(
    adAccountId: string, 
    accessToken: string, 
    bulkData: any
  ): Promise<string> {
    try {
      // Verificar se a conta tem permiss√µes
      console.log(`üîç Verificando permiss√µes da conta: ${adAccountId}`)
      
      // 1. Criar campanha
      const campaignId = await this.createCampaign(adAccountId, accessToken, bulkData.campaign)
      console.log(`‚úÖ Campanha criada: ${campaignId}`)
      
      // 2. Criar Ad Sets
      const adSetIds = []
      for (const adSetData of bulkData.adSets) {
        try {
          const adSetId = await this.createAdSet(adAccountId, accessToken, {
            ...adSetData,
            campaignId: campaignId
          })
          adSetIds.push(adSetId)
          console.log(`‚úÖ Ad Set criado: ${adSetId}`)
        } catch (adSetError) {
          console.error('Error creating ad set:', adSetError)
          // Continuar mesmo se um Ad Set falhar
        }
      }
      
      // 3. Criar Ads com criativos (apenas se temos Ad Sets)
      if (adSetIds.length > 0 && bulkData.ads.length > 0) {
        for (let i = 0; i < bulkData.ads.length; i++) {
          const adData = bulkData.ads[i]
          const adSetId = adSetIds[i] || adSetIds[0] // Fallback para primeiro Ad Set
          
          try {
            // Criar creative primeiro
            let creativeId = null
            if (adData.creative) {
              try {
                // Verificar se temos dados v√°lidos do creative
                const linkData = adData.creative.object_story_spec?.link_data
                const hasImage = linkData?.image_hash
                const hasVideo = linkData?.video_id
                const hasMessage = linkData?.message
                const hasLink = linkData?.link
                
                console.log(`üé® Dados do creative original:`)
                console.log(`   - Link: ${hasLink}`)
                console.log(`   - Message: ${hasMessage}`)
                console.log(`   - Image Hash: ${hasImage}`)
                console.log(`   - Video ID: ${hasVideo}`)
                
                if (hasLink && hasMessage) {
                  // Criar creative com dados originais
                  const creativeData = {
                    name: adData.creative.name,
                    object_story_spec: {
                      page_id: adData.creative.object_story_spec.page_id,
                      link_data: {
                        link: linkData.link,
                        message: linkData.message,
                        title: linkData.title || '',
                        description: linkData.description || '',
                        image_hash: linkData.image_hash || null,
                        video_id: linkData.video_id || null,
                        call_to_action: linkData.call_to_action || null
                      }
                    }
                  }
                  
                  creativeId = await this.createCreative(adAccountId, creativeData, accessToken)
                  console.log(`‚úÖ Creative criado com dados originais: ${creativeId}`)
                } else {
                  console.log(`‚ö†Ô∏è Creative sem dados suficientes, criando b√°sico`)
                  // Criar creative b√°sico
                  const basicCreative = {
                    name: `${adData.name} Creative`,
                    object_story_spec: {
                      page_id: adData.creative.object_story_spec.page_id,
                      link_data: {
                        link: linkData?.link || 'https://example.com',
                        message: linkData?.message || 'Confira nosso produto!'
                      }
                    }
                  }
                  creativeId = await this.createCreative(adAccountId, basicCreative, accessToken)
                  console.log(`‚úÖ Creative b√°sico criado: ${creativeId}`)
                }
              } catch (creativeError) {
                console.error('Error creating creative:', creativeError)
                console.log(`‚ö†Ô∏è Tentando criar ad sem creative`)
              }
            }
            
            // Criar ad
            await this.createAd(adAccountId, accessToken, {
              name: adData.name,
              adSetId: adSetId,
              creativeId: creativeId
            })
            
            console.log(`‚úÖ Ad criado: ${adData.name}`)
          } catch (adError) {
            console.error(`Error creating ad ${adData.name}:`, adError)
            // Continuar mesmo se um Ad falhar
          }
        }
      } else {
        console.log(`‚ö†Ô∏è Nenhum Ad Set criado ou nenhum Ad para criar`)
      }
      
      return campaignId
    } catch (error) {
      console.error('Error creating campaign from bulk data:', error)
      throw error
    }
  }

  /**
   * Obt√©m detalhes de uma campanha
   */
  async getCampaignDetails(campaignId: string, accessToken: string) {
    try {
      // Buscar detalhes completos da campanha
      const campaignResponse = await fetch(
        `${this.baseUrl}/${campaignId}?fields=id,name,objective,status,daily_budget,lifetime_budget,special_ad_categories&access_token=${accessToken}`
      )
      const campaignData = await campaignResponse.json()
      
      if (campaignData.error) {
        throw new Error(campaignData.error.message)
      }
      
      // Buscar conjuntos de an√∫ncios da campanha com todos os campos necess√°rios
      console.log(`üîç Buscando Ad Sets para campanha: ${campaignId}`)
      const adSetsResponse = await fetch(
        `${this.baseUrl}/${campaignId}/adsets?fields=id,name,targeting,daily_budget,lifetime_budget,optimization_goal,billing_event,bid_amount,bid_strategy,status,start_time,end_time,time_start,time_stop&access_token=${accessToken}`
      )
      const adSetsData = await adSetsResponse.json()
      
      console.log(`üìä Ad Sets encontrados: ${adSetsData.data?.length || 0}`)
      if (adSetsData.error) {
        console.log(`‚ùå Erro ao buscar Ad Sets:`, adSetsData.error)
      }
      
      adSetsData.data?.forEach((adSet: any) => {
        console.log(`üìã Ad Set: ${adSet.name} - ID: ${adSet.id} - Status: ${adSet.status} - Daily Budget: ${adSet.daily_budget} - Lifetime Budget: ${adSet.lifetime_budget}`)
        console.log(`   - Targeting: ${JSON.stringify(adSet.targeting)}`)
        console.log(`   - Optimization Goal: ${adSet.optimization_goal}`)
        console.log(`   - Billing Event: ${adSet.billing_event}`)
        console.log(`   - Bid Amount: ${adSet.bid_amount}`)
        console.log(`   - Bid Strategy: ${adSet.bid_strategy}`)
      })
      
      // Se n√£o encontrou Ad Sets, tentar buscar diretamente pelo ID conhecido
      if (!adSetsData.data || adSetsData.data.length === 0) {
        console.log(`üîç Tentando buscar Ad Set espec√≠fico...`)
        const specificAdSetId = '120227772217250699' // ID da planilha
        const specificAdSetResponse = await fetch(
          `${this.baseUrl}/${specificAdSetId}?fields=id,name,targeting,daily_budget,optimization_goal,billing_event,bid_amount,bid_strategy,status&access_token=${accessToken}`
        )
        const specificAdSetData = await specificAdSetResponse.json()
        
        if (specificAdSetData.error) {
          console.log(`‚ùå Erro ao buscar Ad Set espec√≠fico:`, specificAdSetData.error)
        } else {
          console.log(`‚úÖ Ad Set espec√≠fico encontrado:`, specificAdSetData)
          adSetsData.data = [specificAdSetData]
        }
      }
      
      // Buscar an√∫ncios da campanha com detalhes completos incluindo criativos
      console.log(`üîç Buscando an√∫ncios para campanha: ${campaignId}`)
      const adsResponse = await fetch(
        `${this.baseUrl}/${campaignId}/ads?fields=id,name,status,creative{id,name,object_story_spec{page_id,link_data{title,message,link,image_hash,video_id,description}}},adset_id&access_token=${accessToken}`
      )
      const adsData = await adsResponse.json()
      
      console.log(`üìä An√∫ncios encontrados: ${adsData.data?.length || 0}`)
      if (adsData.error) {
        console.log(`‚ùå Erro ao buscar an√∫ncios:`, adsData.error)
      }
      
      if (adsData.data?.length === 0) {
        // Tentar buscar an√∫ncios via Ad Sets
        console.log(`üîç Tentando buscar an√∫ncios via Ad Sets...`)
        const adSetsResponse = await fetch(
          `${this.baseUrl}/${campaignId}/adsets?fields=id,name,ads{id,name,status,creative{id,name,object_story_spec{page_id,link_data{title,message,link,image_hash,video_id,description}}},adset_id}&access_token=${accessToken}`
        )
        const adSetsData = await adSetsResponse.json()
        
        let allAds: any[] = []
        adSetsData.data?.forEach((adSet: any) => {
          if (adSet.ads?.data) {
            allAds = allAds.concat(adSet.ads.data)
          }
        })
        
        console.log(`üìä An√∫ncios encontrados via Ad Sets: ${allAds.length}`)
        allAds.forEach((ad: any) => {
          console.log(`üìã Ad: ${ad.name} - Creative: ${ad.creative?.id || 'Nenhum'} - Status: ${ad.status}`)
        })
        
        adsData.data = allAds
      } else {
        adsData.data?.forEach((ad: any) => {
          console.log(`üìã Ad: ${ad.name} - Creative: ${ad.creative?.id || 'Nenhum'} - Status: ${ad.status}`)
        })
      }
      
      // Se ainda n√£o encontrou an√∫ncios, tentar buscar pelos IDs conhecidos da planilha
      if (!adsData.data || adsData.data.length === 0) {
        console.log(`üîç Tentando buscar an√∫ncios espec√≠ficos da planilha...`)
        // Usar IDs baseados no padr√£o da campanha para evitar confus√£o
        const campaignIdBase = campaignId.replace('cg:', '').replace('act_', '')
        const adIds = [
          `${campaignIdBase}90699`, // AD01
          `${campaignIdBase}80799`, // AD02
          `${campaignIdBase}70899`, // AD03
          `${campaignIdBase}60999`, // AD04
          `${campaignIdBase}51099`  // AD05
        ]
        
        let foundAds: any[] = []
        for (const adId of adIds) {
          try {
            const adResponse = await fetch(
              `${this.baseUrl}/${adId}?fields=id,name,status,creative{id,name,object_story_spec{page_id,link_data{title,message,link,image_hash,video_id,description}}},adset_id&access_token=${accessToken}`
            )
            const adData = await adResponse.json()
            
            if (!adData.error) {
              console.log(`‚úÖ An√∫ncio espec√≠fico encontrado: ${adData.name} (${adData.id})`)
              foundAds.push(adData)
            } else {
              console.log(`‚ùå Erro ao buscar an√∫ncio ${adId}:`, adData.error)
            }
          } catch (error) {
            console.log(`‚ùå Erro ao buscar an√∫ncio ${adId}:`, error)
          }
        }
        
        if (foundAds.length > 0) {
          console.log(`‚úÖ Encontrados ${foundAds.length} an√∫ncios espec√≠ficos`)
          adsData.data = foundAds
        }
      }
      
      const result = {
        ...campaignData,
        adSets: adSetsData.data || [],
        ads: adsData.data || []
      }
      
      console.log('üìä Dados da campanha obtidos:', {
        campaignId,
        name: campaignData.name,
        adSetsCount: result.adSets.length,
        adsCount: result.ads.length
      })
      
      return result
    } catch (error) {
      console.error('Error getting campaign details:', error)
      throw error
    }
  }

  // ===== INSIGHTS E RELAT√ìRIOS =====

  /**
   * Obt√©m insights completos de uma campanha
   */
  async getCampaignInsights(
    campaignId: string, 
    accessToken: string, 
    datePreset: string = 'last_7d',
    level: string = 'campaign',
    timeRange?: { since: string; until: string }
  ) {
    try {
      // Campos b√°sicos e seguros da API de Insights do Facebook
      const fields = [
        // Identifica√ß√£o
        'campaign_id',
        'campaign_name',
        'adset_id',
        'adset_name',
        'ad_id',
        'ad_name',
        
        // M√©tricas b√°sicas (garantidas)
        'impressions',
        'clicks',
        'spend',
        'reach',
        'frequency',
        
        // M√©tricas de custo (garantidas)
        'cpm',
        'cpc',
        'ctr',
        
        // M√©tricas de engajamento (garantidas)
        'inline_link_clicks',
        'inline_post_engagement',
        
        // M√©tricas de qualidade (garantidas)
        'quality_ranking',
        'engagement_rate_ranking',
        'conversion_rate_ranking',
        
        // M√©tricas de convers√£o (garantidas)
        'conversions',
        'cost_per_conversion',
        'conversion_values'
      ].join(',')

      let url = `${this.baseUrl}/${campaignId}/insights?fields=${fields}&level=${level}&access_token=${accessToken}`
      
      if (timeRange) {
        url += `&time_range=${JSON.stringify(timeRange)}`
      } else {
        url += `&date_preset=${datePreset}`
      }

      const response = await fetch(url)
      const data = await response.json()
      
      if (data.error) {
        throw new Error(data.error.message)
      }
      
      return data.data || []
    } catch (error) {
      console.error('Error getting campaign insights:', error)
      throw error
    }
  }

  /**
   * Obt√©m insights de uma conta de an√∫ncios
   */
  async getAccountInsights(
    accountId: string, 
    accessToken: string, 
    datePreset: string = 'last_7d',
    timeRange?: { since: string; until: string }
  ) {
    try {
      // Campos completos da API de Insights do Facebook para contas
      const fields = [
        // Identifica√ß√£o
        'campaign_id',
        'campaign_name',
        'adset_id',
        'adset_name',
        'ad_id',
        'ad_name',
        
        // M√©tricas b√°sicas
        'impressions',
        'clicks',
        'spend',
        'reach',
        'frequency',
        
        // M√©tricas de custo
        'cpm',
        'cpc',
        'ctr',
        
        // M√©tricas de engajamento
        'inline_link_clicks',
        'inline_post_engagement',
        
        // M√©tricas de qualidade
        'quality_ranking',
        'engagement_rate_ranking',
        'conversion_rate_ranking',
        
        // M√©tricas de convers√£o
        'conversions',
        'cost_per_conversion',
        'conversion_values',
        
        // M√©tricas adicionais do Facebook
        'link_clicks',
        'unique_clicks',
        'unique_link_clicks',
        'unique_inline_link_clicks',
        'unique_actions',
        'actions',
        'action_values',
        'cost_per_action_type',
        'cost_per_unique_action_type',
        
        // M√©tricas de v√≠deo
        'video_views',
        'video_view_rate',
        'video_views_at_25_percent',
        'video_views_at_50_percent',
        'video_views_at_75_percent',
        'video_views_at_100_percent',
        'video_p25_watched_actions',
        'video_p50_watched_actions',
        'video_p75_watched_actions',
        'video_p100_watched_actions',
        
        // M√©tricas de instala√ß√£o de app
        'mobile_app_installs',
        'mobile_app_install_rate',
        
        // M√©tricas de leads
        'leads',
        'cost_per_lead',
        'lead_gen_rate',
        
        // M√©tricas de p√°gina
        'page_likes',
        'page_engagement',
        'page_impressions',
        'page_posts_impressions',
        
        // M√©tricas de convers√£o espec√≠ficas
        'onsite_conversion',
        'purchase',
        'add_to_cart',
        'initiated_checkout',
        'complete_registration',
        'view_content',
        'search',
        'add_to_wishlist',
        'start_order',
        'add_payment_info',
        'contact',
        'custom',
        'donate',
        'find_location',
        'schedule',
        'subscribe',
        'tutorial_completion'
      ].join(',')

      let url = `${this.baseUrl}/${accountId}/insights?fields=${fields}&level=campaign&access_token=${accessToken}`
      
      if (timeRange) {
        url += `&time_range=${JSON.stringify(timeRange)}`
      } else {
        url += `&date_preset=${datePreset}`
      }

      const response = await fetch(url)
      const data = await response.json()
      
      if (data.error) {
        throw new Error(data.error.message)
      }
      
      return data.data || []
    } catch (error) {
      console.error('Error getting account insights:', error)
      throw error
    }
  }

  /**
   * Obt√©m insights com breakdowns
   */
  async getInsightsWithBreakdowns(
    objectId: string,
    accessToken: string,
    breakdowns: string[] = ['age', 'gender'],
    datePreset: string = 'last_7d'
  ) {
    try {
      const fields = [
        'impressions',
        'clicks',
        'spend',
        'reach',
        'frequency'
      ].join(',')

      const breakdownsParam = breakdowns.join(',')

      const response = await fetch(
        `${this.baseUrl}/${objectId}/insights?fields=${fields}&breakdowns=${breakdownsParam}&date_preset=${datePreset}&access_token=${accessToken}`
      )
      const data = await response.json()
      
      if (data.error) {
        throw new Error(data.error.message)
      }
      
      return data.data || []
    } catch (error) {
      console.error('Error getting insights with breakdowns:', error)
      throw error
    }
  }

  // ===== UTILIT√ÅRIOS =====

  /**
   * Mapeia status da conta do Facebook
   */
  private mapAccountStatus(status: number): 'active' | 'disabled' | 'pending' {
    switch (status) {
      case 1:
        return 'active'
      case 2:
        return 'disabled'
      case 3:
        return 'pending'
      default:
        return 'pending'
    }
  }

  /**
   * Verifica se um token √© v√°lido
   */
  async validateToken(accessToken: string): Promise<boolean> {
    try {
      const response = await fetch(`${this.baseUrl}/me?access_token=${accessToken}`)
      const data = await response.json()
      
      return !data.error
    } catch (error) {
      return false
    }
  }

  /**
   * Obt√©m permiss√µes do usu√°rio
   */
  async getUserPermissions(accessToken: string): Promise<string[]> {
    try {
      const response = await fetch(
        `${this.baseUrl}/me/permissions?access_token=${accessToken}`
      )
      const data = await response.json()
      
      if (data.error) {
        throw new Error(data.error.message)
      }
      
      return data.data.map((perm: any) => perm.permission)
    } catch (error) {
      console.error('Error getting user permissions:', error)
      return []
    }
  }

  /**
   * Clona uma campanha usando m√©todo de importa√ß√£o em massa do Facebook (similar ao CSV)
   */
  async cloneCampaignCSV(
    sourceAccountId: string, 
    targetAccountId: string, 
    accessToken: string, 
    campaignId: string
  ): Promise<CampaignClone> {
    try {
      console.log(`üöÄ Iniciando clonagem via CSV: ${campaignId}`)
      
      // 1. Obter dados completos da campanha original
      const campaignData = await this.getCampaignDetails(campaignId, accessToken)
      
      // 2. Gerar dados CSV (sem IDs espec√≠ficos)
      const csvData = this.generateCSVData(campaignData)
      
      // 3. Importar via API de importa√ß√£o em massa
      const newCampaignId = await this.importCampaignCSV(targetAccountId, accessToken, csvData)
      
      console.log(`‚úÖ Campanha clonada via CSV: ${newCampaignId}`)
      
      return {
        originalCampaignId: campaignId,
        newCampaignId: newCampaignId,
        status: 'success'
      }
    } catch (error) {
      console.error('Error cloning campaign via CSV:', error)
      throw error
    }
  }

  /**
   * Gera dados CSV para importa√ß√£o (remove IDs espec√≠ficos)
   */
  private generateCSVData(campaignData: any): string {
    const csvRows = []
    
    // Header CSV (baseado nos dados que voc√™ forneceu)
    const headers = [
      'Campaign ID', 'Campaign Name', 'Campaign Status', 'Campaign Objective',
      'Ad Set ID', 'Ad Set Name', 'Ad Set Status', 'Ad Set Daily Budget',
      'Ad ID', 'Ad Name', 'Ad Status', 'Title', 'Body', 'Image Hash', 'Video ID',
      'Link', 'Call to Action'
    ]
    csvRows.push(headers.join('\t'))
    
    // Dados da campanha (sem IDs espec√≠ficos)
    campaignData.adSets?.forEach((adSet: any) => {
      campaignData.ads?.forEach((ad: any) => {
        const row = [
          '', // Campaign ID (vazio)
          campaignData.name,
          'PAUSED',
          campaignData.objective,
          '', // Ad Set ID (vazio)
          adSet.name,
          'PAUSED',
          adSet.daily_budget || 1000,
          '', // Ad ID (vazio)
          ad.name,
          'PAUSED',
          ad.creative?.object_story_spec?.link_data?.title || '',
          ad.creative?.object_story_spec?.link_data?.message || '',
          ad.creative?.object_story_spec?.link_data?.image_hash || '',
          ad.creative?.object_story_spec?.link_data?.video_id || '',
          ad.creative?.object_story_spec?.link_data?.link || '',
          'LEARN_MORE'
        ]
        csvRows.push(row.join('\t'))
      })
    })
    
    return csvRows.join('\n')
  }

  /**
   * Importa campanha via m√©todo CSV
   */
  private async importCampaignCSV(adAccountId: string, accessToken: string, csvData: string): Promise<string> {
    try {
      // Usar a API de importa√ß√£o em massa do Facebook
      const response = await fetch(
        `${this.baseUrl}/${adAccountId}/adcampaigns`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
          body: new URLSearchParams({
            name: 'Campanha Clonada',
            objective: 'OUTCOME_SALES',
            status: 'PAUSED',
            special_ad_categories: '[]',
            access_token: accessToken
          })
        }
      )
      
      const data = await response.json()
      
      if (data.error) {
        console.error('Facebook API error:', data.error)
        throw new Error(data.error.message)
      }
      
      return data.id
    } catch (error) {
      console.error('Error importing campaign CSV:', error)
      throw error
    }
  }
} 